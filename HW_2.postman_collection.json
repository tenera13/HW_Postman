{
	"info": {
		"_postman_id": "f6cd7fa0-51e1-4608-8efc-8104dbe3a319",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20132884"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							" var jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name (руками) = name response\", function () {\r",
							"       pm.expect(jsonData.name).to.eql(\"Elena\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age (руками) = age response\", function () {\r",
							"       pm.expect(jsonData.age).to.eql(\"30\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary (руками) = salary response\", function () {\r",
							"       pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var request_data = request.data;\r",
							"//console.log(request_data);\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name (from request) = name response\", function () {\r",
							"       pm.expect(jsonData.name).to.eql(request_data.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age (from request) = age response\", function () {\r",
							"       pm.expect(jsonData.age).to.eql(request_data.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary (from request) = salary response\", function () {\r",
							"       pm.expect(jsonData.salary).to.eql(+request_data.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5 = +request_data.salary*4;\r",
							"// console.log(salary_1_5);\r",
							"// console.log(jsonData.family.u_salary_1_5_year);\r",
							"pm.test(\"u_salary_1_5_year = salary*4 (salary from request)\", function () {\r",
							"       pm.expect(jsonData.family.u_salary_1_5_year).to.eql(salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var req_data=pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name (from request) = name response\", function () {\r",
							"       pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age (from request) = age response\", function () {\r",
							"       pm.expect(jsonData.age).to.eql(req_data.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary (from request) = salary response\", function () {\r",
							"       pm.expect(jsonData.salary).to.eql(+req_data.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name\", function () {\r",
							"       pm.expect(jsonData.family.pets.dog).have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function () {\r",
							"       pm.expect(jsonData.family.pets.dog).have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog name Luky\", function () {\r",
							"       pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog age 4\", function () {\r",
							"       pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Anna&age=25&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var req_data=pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name (from request) = name response\", function () {\r",
							"       pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age (from request) = age response\", function () {\r",
							"       pm.expect(jsonData.age).to.eql(+req_data.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req_data.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary (from request) = salary[0] response\", function () {\r",
							"       pm.expect(jsonData.salary[0]).to.eql(+req_data.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary*2 (from request) = salary[1] response\", function () {\r",
							"       pm.expect(+jsonData.salary[1]).to.eql(+req_data.salary*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary*3 (from request) = salary[2] response\", function () {\r",
							"       pm.expect(+jsonData.salary[2]).to.eql(+req_data.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let sal = jsonData.salary;\r",
							"for (let i=0;i<sal.lenght;i++) {\r",
							"  console.log(sal[i])  \r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Mark&age=29&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mark"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var req_data = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response have start_qa_salary\", function () {\r",
							"       pm.expect(jsonData).have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response have qa_salary_after_6_months\", function () {\r",
							"       pm.expect(jsonData).have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response have qa_salary_after_12_months\", function () {\r",
							"       pm.expect(jsonData).have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response have qa_salary_after_1.5_year\", function () {\r",
							"       pm.expect(jsonData).have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response have qa_salary_after_3.5_years\", function () {\r",
							"       pm.expect(jsonData).have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"response have person\", function () {\r",
							"       pm.expect(jsonData).have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary (from request) = start_qa_salary response\", function () {\r",
							"       pm.expect(jsonData.start_qa_salary).to.eql(+req_data.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary*2 (from request) = qa_salary_after_6_months response\", function () {\r",
							"       pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req_data.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"salary*2.7 (from request) = qa_salary_after_12_months response\", function () {\r",
							"       pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req_data.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"salary*3.3 (from request) = qa_salary_after_1.5_year response\", function () {\r",
							"       pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req_data.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"salary*3.8 (from request) = qa_salary_after_3.5_years response\", function () {\r",
							"       pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req_data.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary (from request) = person.u_name[1] response\", function () {\r",
							"       pm.expect(jsonData.person.u_name[1]).to.eql(+req_data.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"age (from request) = person.u_age response\", function () {\r",
							"       pm.expect(jsonData.person.u_age).to.eql(+req_data.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary*4.2 (from request) = person.u_salary_5_years response\", function () {\r",
							"       pm.expect(jsonData.person.u_salary_5_years).to.eql(+req_data.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let per = jsonData.person;\r",
							"for (key in per) {\r",
							"  console.log(key)  \r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}